/* Michaël PÉRIN,
 * VERIMAG / Univ. Grenoble-Alpes
 * INP / Polytech Grenoble
 */

// PROJET A&G 2023 : a Lexer/Parser for simple C programs

// USAGE: java -cp ./bin info3.parser.javacc.projet.langageC._code.Parser test/file.c

PARSER_BEGIN(Parser)
package info3.parser.javacc.projet.langageC._code;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import info3.shared.Tracing;

public class Parser {

	public static Algorithm from_file(String path_file) throws Exception {
    return new Parser(new BufferedReader(new FileReader(path_file))).parse();
  }

	public static Algorithm from_string(String input_string) throws Exception {
	  return new Parser(new java.io.StringReader(input_string)).parse();
  }

  public static void main(String[] args) throws Exception {
    Tracing.enable_tracing(true);
    Tracing.enable_xterm_font(true);
    //
    String path_file = args[0];
    Algorithm a = from_file(path_file);
    // a.print();          
    // a.toDot("../dot/"); 
    // go push
    System.out.println("\n");
  }
}
PARSER_END(Parser)

// === LEXER ===

SKIP:
{ < SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* > { Tracing.token("COMMENT", image.toString()); }
}

SKIP:
{ < SPACE: " " | "\t" | "\n" | "\r" > // { Tracing.token("SPACE", image.toString()); }
}

TOKEN:
{ < SEMICOL: ";" > { Tracing.token("SEMICOL", image.toString()); }
| < COMMA : "," > { Tracing.token("COMMA", image.toString()); }
| < DOT : "." > { Tracing.token("DOT", image.toString()); }
}

TOKEN:
{ < PTR  : "*" | "&" >  { Tracing.token("PTR", image.toString()); }
| < PRE_POST_OP : "++" | "--" | "!">  { Tracing.token("PRE_POST_OP", image.toString()); }
| < BINOP  : "/" | "*" | "!=" | "==" | "|" | "&" | "+" | "-" | "%" | "<" | ">" | "<=" | ">=" | "&&" | "||" | "<<" | ">>" > { Tracing.token("BINOP", image.toString()); }
| < BINASSIGN : "=" | ":=" | "+=" | "-=" | "*=" | "&="  | "|=" | "<<=" | ">>=" >  { Tracing.token("ASSIGN", image.toString()); }
}

TOKEN:
{ < LBRACE  : "{" > { Tracing.token("LBRACE", image.toString()); }
| < RBRACE  : "}" > { Tracing.token("RBRACE", image.toString()); }
| < LBRACKET: "[" > { Tracing.token("LBRACKET", image.toString()); }
| < RBRACKET: "]" > { Tracing.token("RBRACKET", image.toString()); }
| < LPAR    : "(" > { Tracing.token("LPAR", image.toString()); }
| < RPAR    : ")" > { Tracing.token("RPAR", image.toString()); }
}

TOKEN:
{ < STRING : < DQUOTE > (~["\\"])* < DQUOTE > > {  Tracing.token("STRING", image.toString()); }
| < CHAR: < QUOTE > (~["\\"])* < QUOTE > > { Tracing.token("CHAR", image.toString()); }
}

TOKEN:
{ < QUOTE: "\'" > { Tracing.token("QUOTE", image.toString()); }
| < DQUOTE: "\"" > { Tracing.token("DQUOTE", image.toString()); }
}

// = KEYWORDS must be defined before IDENTIFIER

TOKEN:
{ < BASIC_TYPE: "bool" | "char" | "double" | "float" | "long" | "int" | "string" > { Tracing.token("TYPE", image.toString()); }
| < SIGN: "unsigned" | "signed" > { Tracing.token("SIGN", image.toString()); }
| < PRE_TYPE: "long" | "short" > { Tracing.token("PRE_TYPE", image.toString()); }
}

TOKEN:
{ < ALGO: "ALGORITHM" > { Tracing.token("ALGO", image.toString()); }
| < IF: "if" > { Tracing.token("IF", image.toString()); }
| < ELSE: "else" > { Tracing.token("ELSE", image.toString()); }
| < WHILE: "while" > { Tracing.token("WHILE", image.toString()); }
| < RETURN: "return" > { Tracing.token("RETURN", image.toString()); }
}

TOKEN:
{ < BOOLEAN: "true" | "false" > { Tracing.token("BOOLEAN", image.toString()); }
}  

// = NUMERIC

TOKEN: {< #DIGIT: ["0"-"9"] >}

TOKEN:
{
  < FLOAT : (< DIGIT >)+  < DOT >  (< DIGIT >)*
| 			(< DIGIT >)*  < DOT >  (< DIGIT >)+ > { Tracing.token("FLOAT", image.toString()); }
|  <  INTEGER: (<DIGIT>)+ > { Tracing.token("INTEGER", image.toString()); }
}

// = IDENTIFIER : GIVEN

TOKEN: {< #LOWERCASE: ["a"-"z"] >}
TOKEN: {< #UPPERCASE: ["A"-"Z"] >}

TOKEN: {< #ANY_IDENT: (<UPPERCASE> | <LOWERCASE> | <DIGIT> | "_")+ >}

TOKEN: {< #FIRST_UNDERSCORE: "_"  (<ANY_IDENT>)* >}
TOKEN: {< #FIRST_LOW: <LOWERCASE> (<ANY_IDENT>)* >}
TOKEN: {< #FIRST_UP: <UPPERCASE> (<ANY_IDENT>)* >}

TOKEN:
{ < IDENTIFIER: <ANY_IDENT> > { Tracing.token("IDENTIFIER", image.toString()); }
}


// === PARSER ===


// GIVEN
// SEED = parse ::= "ALGORITHM" . "(" . <IDENTIFIER> . ")" . BLOCK . <EOF>
Algorithm parse():
{
  Tracing.call(0, "PARSER");
  Token token;
  Tree t;
  Algorithm a;
}
{
  <ALGO>
  <LPAR>
  token = <IDENTIFIER>
  <RPAR>
  t = BLOCK(1)
  <EOF>
  	{
  	  a = new Algorithm(token.toString(), t);
  	  // Tracing.parsed(0, "PARSER", "\n");
  	  return a;
  	 }
}


// BLOCK ::= "{" . SEQUENCE . "}"
Tree BLOCK(int d):
{
   Tracing.call(d, "BLOCK");
   Tree t,r;
}
{
  <LBRACE>
  t = SEQUENCE(d+1)
  <RBRACE>
    {
      r = new Block(t);
  	  // Tracing.parsed(d, "BLOCK", r.pretty());
      return r;
    }
}


// SEQUENCE ::= ( STATEMENT )*
Tree SEQUENCE(int d):
{
  Tracing.call(d, "SEQUENCE");
  Tree t;
  ArrayList<Tree > trees = new ArrayList<Tree>();
}
{
  (
    t = STATEMENT(d+1)
    { trees.add(t); }
  )*
  { return new Sequence(trees); }
}


// STATEMENT ::=
//  | DECL . ";"
//  | EXPR . opt_ASSIGNEMENT ";"
//  | RETURN . ";"
//  | IFTE
//	| WHILETE
Tree STATEMENT(int d) :
{
  Tracing.call(d, "STATEMENT");
  Tree t;
}
{
  t = DECL(d+1)
  <SEMICOL>
   { return t; }
| t = EXPR(d+1) 
  t = opt_ASSIGNMENT(d+1, t)
  <SEMICOL>
  { return t; }
| t = RETURN(d+1)
  <SEMICOL>
   { return t; }
| t = IFTE(d+1)
   { return t; }
| t = WHILEDO(d+1)
   { return t; }
}

// RETURN ::= "return" . EXPR
Tree RETURN(int d) :
{
  Tracing.call(d, "RETURN");
  Tree t;
}
{
  <RETURN>
  t = EXPR(d)
  {
    return new Return(t);
  }
}

// EXPR ::= "(" . EXPR . ")" . opt_BINOP_EXPR
//		   | opt_PRE_POST_OP . E1 . opt_BINOP_EXPR
Tree EXPR(int d) :
{
  Tracing.call(d, "EXPR");
  Tree t,r,s, nu = null;
  Token t1, t2;
}
{
  t1 = < LPAR >
  t = EXPR(d+1)
  t2 = < RPAR >
  r = opt_BINOP_EXPR(d+1, t)
  { return new Expr(nu,r); }
|
  t = opt_PRE_POST_OP(d+1)
  r = E1(d+1,t)
  s = opt_BINOP_EXPR(d+1, r)
  { return new Expr(t,s); }
}

// Tree opt_BINOP_EXPR ::=
//    | BINOP . EXPR
//    | epsilon
Tree opt_BINOP_EXPR(int d, Tree left) :
{
  Tracing.call(d, "opt_BINOP_EXPR");
  Token binop;
  Tree right;
}
{
  //binop = BINOP(d+1)
  (    binop = <BINOP>
  | binop = <PTR>
  )
  right = EXPR(d+1)
  { //return new Binop(left, binop, right); }
  return new Binop(left, binop.toString(), right); }
| /*epsilon*/
    { return left; }
}

// ASSIGNMENT ::= IDENTIFIER . opt_ASSIGNMENT 
//Tree ASSIGNMENT(int d) :
//{
//   Tracing.call(d,"ASSIGNMENT");
//   Token token;
//   Tree rhs;
//   Tree lhs;
//}
//{
//   lhs = IDENTIFIER(d+1)
//   rhs = opt_ASSIGNMENT(d+1, lhs)
//   { return rhs; }
//}

// opt_ASSIGNMENT ::= 	BINASSIGN . EXPR
//				|        epsilon
Tree opt_ASSIGNMENT(int d, Tree lhs) :
{
   Tracing.call(d,"ASSIGNMENT");
   Tree rhs ;
   Token token;
   Tree r;
}
{
  token = <BINASSIGN>
  rhs = EXPR(d+1)
  { return new Assign(lhs, token.toString(), rhs); }
|  /* epsilon */
  { return lhs; }
}

// DECL ::= opt_SIGN . opt_PRE_TYPE . BASIC_TYPE . IDENTIFIER . opt_DECL . ("," . IDENTIFIER . opt_DECL)*
Tree DECL(int d):
{
  Tracing.call(d,"DECLARATION");
  Token token,ptrs;
  Tree r, rhs;
  String s,s2;
  ArrayList<Tree > trees = new ArrayList<Tree>();
}
{
  s = opt_SIGN(d+1)
  s2 = opt_PRE_TYPE(d+1, s)
//  (ptrs = < PTR >
//  { s2 = s2 + ptrs.toString(); })*
  token = <BASIC_TYPE>
  { s2 = s2 + token.toString(); }
  rhs = IDENTIFIER(d+1)
  r = opt_DECL(d+1, rhs)
  { trees.add(r);  }
  ( < COMMA >
    rhs = IDENTIFIER(d+1) 
    r = opt_DECL(d+1, rhs)
    { trees.add(r); }  )*
  { return new Decl(s2, trees); }
}

//opt_DECL ::= epsilon
// 			 | BINASSIGN . EXPR
Tree opt_DECL(int d, Tree rhs) :
{
  Tracing.call(d,"opt_DECL");
  Token token;
  Tree lhs;
}
{
  token = <BINASSIGN>
  lhs = EXPR(d+1)
  { return new Assign(rhs, token.toString(), lhs); }
|  //epsilon
  { return rhs; }
}


// IFTE ::= "if" . "(" . EXPR . ")" . (BLOCK | EXPR . ";") . opt_ELSE
Tree IFTE(int d) :
{
   Tracing.call(d, "IFTE");
   Tree tc,tt,te;
}
{
  <IF>
  <LPAR>
  tc = EXPR(d+1)
  <RPAR>
  ( tt = BLOCK(d+1)
  |
  tt = EXPR(d+1)
  <SEMICOL> )  
  te = opt_ELSE(d+1)
  { return new Ifte(tc, tt, te); }
}

// opt_ELSE ::= epsilon
// 			  | "else" . (BLOCK | EXPR . ";")
Tree opt_ELSE(int d) :
{
	Tracing.call(d, "opt_ELSE");
	Tree te;
}
{
	<ELSE>
	( te = BLOCK(d+1)    |
    te = EXPR(d+1)
    < SEMICOL > )  
	{ return te; }
| /*epsilon*/
	{ return null; }
}

// WHILEDO ::= "while" . "(" . EXPR . ")" . BLOCK
Tree WHILEDO(int d):
{
	Tracing.call(d,"WHILEDO");
	Tree t,te;
}
{
  	<WHILE>
  	<LPAR>
  	t = EXPR(d+1)
  	<RPAR>
  	te = BLOCK(d+1)
	{ return new While(t,te); }
}

// E1 ::=  VALUE . opt_PRE_POST_OP
//		| VAR_FUNC . opt_PRE_POST_OP
//		| (PTR)+ . IDENTIFIER . opt_PRE_POST_OP
Tree E1(int d, Tree pre) :
{
  Tracing.call(d, "E1");
  Tree t, post;
  String ptrs = null;
  Token token;
}
{
  (
   t = VALUE(d+1)
|
   t = VAR_FUNC(d+1)
|
  (
    token = <PTR>
	{ ptrs = ptrs + token.toString(); }
  )+
  t = IDENTIFIER(d+1)
  )
  post = opt_PRE_POST_OP(d+1)
  {return new E1(pre,ptrs,t,post); }
}

// VAR_FUNC ::= IDENTIFIER. ("(" . ARGS . ")" | epsilon) . opt_PRE_POST_OP
Tree VAR_FUNC(int d) :
{
  Tracing.call(d, "VAR_FUNC");
  Tree t, args;
}
{
  t = IDENTIFIER(d+1)
  (    < LPAR >
    args = ARGS(d+1)
    < RPAR >
    { return new Call(t,args); }
  |
    /* epsilon */
	{ return t; }
  )
}

// ARGS ::= epsilon | EXPR . ("," . EXPR)*
Tree ARGS(int d) :
{
  Tracing.call(d,"ARGS");
  Tree ex, arg;
  ArrayList<Tree > args = new ArrayList<Tree >();
}
{
  ex = EXPR(d+1)
  { args.add(ex); }
  (    < COMMA >
    arg = EXPR(d+1)
    { args.add(arg); }
  )*
  { return new Args(args); }
| /*epsilon*/
  { return null; }
}

// opt_PRE_POST_OP ::= PRE_POST_OP
//					 | ("[" . EXPR . "]")+
//					 | epsilon
Tree opt_PRE_POST_OP(int d) :
{
  Tracing.call(d,"opt_PRE_POST_OP");
  Tree t;
  Token token;
}
{
  token = < PRE_POST_OP >
  { return new PrePostOp(token.toString()); }
|
 (< LBRACKET > 
  t = EXPR(d+1) 
  < RBRACKET >)+
  { return new PrePostOp(t); }
| //epsilon
  { return null; }
}


// Tree VALUE ::=
//    | <INTEGER>
//    | <BOOLEAN>
//    | <STRING>
//    | <FLOAT>
//    | <DOUBLE> TODO
//    | <CHAR>

Tree VALUE(int d) :
{
  Tracing.call(d, "VALUE");
  Token token;
  Tree t;
}
{
  (
  token = < INTEGER >
| token = < BOOLEAN >
| token = < STRING >
| token = < FLOAT >
//| token = < DOUBLE >
// { return token.toString(); }
| token = < CHAR >
)
 { return new Value(token); }
}

//SIGN ::= "unsigned" | "signed" | epsilon
String opt_SIGN(int d) :
{
  Tracing.call(d,"opt_SIGN");
  Token token;
}
{
  token = <SIGN>
  { return token.toString(); }
| //epsilon
  { return null; }
}

//PRE_TYPE ::= "long" | "short" | epsilon
String opt_PRE_TYPE(int d, String s) :
{
  Tracing.call(d,"opt_PRE_TYPE");
  Token token;
}
{
  token = <PRE_TYPE>
  { return s + token.toString(); }
| //epsilon
  { return s; }
}

// == GIVEN ==
// Tree IDENTIFIER ::= <IDENTIFIER> | < PTR >
Tree IDENTIFIER(int d) :
{
  Tracing.call(d,"IDENTIFIER");
  Token token;
}
{ token = <IDENTIFIER>
    { return new Ident(token.toString()); }
}


//String BINOP(int d) :
//{
//  Token token;
//}
//{
//  token = < BINOP >
//  { return token.toString(); }
//|
//  token = < PTR >
//  { return token.toString(); }
//}    
